<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        2Q==
</value>
  </data>
</root>